name: CI

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Import AWSSecrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.apr.vee.codes
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              aws/sts/vaultAction access_key | AWS_ACCESS_KEY_ID ;
              aws/sts/vaultAction secret_key | AWS_SECRET_ACCESS_KEY ;

      #   # USANDO JOB COM CURL
      # - name: Import AWS Secrets 
      #   id: import-secrets
      #   env:
      #     VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      #     VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      #   run: |
      #     echo "Fetching AWS credentials from Vault..."
      #     response=$(curl --silent --header "X-Vault-Token: $VAULT_TOKEN" \
      #       ${VAULT_ADDR}/v1/aws/creds/vaultAction)

      #     echo "Parsing response..."
      #     aws_access_key=$(echo $response | jq -r .data.access_key)
      #     aws_secret_key=$(echo $response | jq -r .data.secret_key)
      #     aws_session_token=$(echo $response | jq -r .data.security_token)

      #     echo "Setting output and environment variables..."
      #     echo "::set-output name=aws_access_key::$aws_access_key"
      #     echo "::set-output name=aws_secret_key::$aws_secret_key"
      #     echo "::set-output name=aws_session_token::$aws_session_token"

      #     echo "AWS_ACCESS_KEY_ID=$aws_access_key" >> $GITHUB_ENV
      #     echo "AWS_SECRET_ACCESS_KEY=$aws_secret_key" >> $GITHUB_ENV
      #     echo "AWS_SESSION_TOKEN=$aws_session_token" >> $GITHUB_ENV   

      - name: Generate Database credentials with Vault using curl
        id: db_creds
        continue-on-error: true
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          VAULT_SECRET_PATH: "secret/data/app/config"
        run: |
          echo "Fetching database credentials from Vault..."
          response=$(curl --silent --header "X-Vault-Token: $VAULT_TOKEN" \
            $VAULT_ADDR/v1/postgres/creds/readWrite)

          echo "Parsing response..."
          db_username=$(echo $response | jq -r .data.username)
          db_password=$(echo $response | jq -r .data.password)

          echo "Setting output variables..."
          echo "::set-output name=db_username::$db_username"
          echo "::set-output name=db_password::$db_password"

          echo "DB_USERNAME=$db_username" >> $GITHUB_ENV
          echo "DB_PASSWORD=$db_password" >> $GITHUB_ENV

      - name: publish db credentials on vault
        id: pub_db_creds
        continue-on-error: true
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          echo "Publishing database credentials to Vault..."
          curl --header "X-Vault-Token: $VAULT_TOKEN" \
            --request POST \
            --data "{\"data\": {\"username\": \"$DB_USERNAME\", \"password\": \"$DB_PASSWORD\"}}" \
            $VAULT_ADDR/v1/database/data/vault-action-teste

        # IMPORTANDO COM ACTION DO VAULT
      - name: Import Secrets
        id: import-secrets-5
        uses: hashicorp/vault-action@v2
        continue-on-error: true
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}   
          secrets: |
              /root_db/data/secret master | ROOT_DB_SECRET ;

      - name: Use Database credentials
        continue-on-error: true
        env:
          DB_USERNAME: ${{ steps.db_creds.outputs.db_username }}
          DB_PASSWORD: ${{ steps.db_creds.outputs.db_password }}
        run: |
          PGPASSWORD=$DB_PASSWORD psql -h rds-vault-teste.cpzxdcn9a81i.us-east-1.rds.amazonaws.com -U $DB_USERNAME -d postgres -c '\dt'          

      - name: Run a multi-line script
        continue-on-error: true
        run: |
          touch secrets-vault.txt
          echo "===================================" > secrets-vault.txt
          echo "The secrets are:" >> secrets-vault.txt
          echo "AWS_ACCESS_KEY_ID = ${{ env.AWS_ACCESS_KEY_ID }}" >> secrets-vault.txt
          echo "AWS_SECRET_ACCESS_KEY = ${{ env.AWS_SECRET_ACCESS_KEY }}" >> secrets-vault.txt
          echo "===================================" >> secrets-vault.txt
          echo "The secrets are:" >> secrets-vault.txt
          echo "ROOT_DB_SECRET = ${{ env.ROOT_DB_SECRET }}" >> secrets-vault.txt
          echo "===================================" >> secrets-vault.txt       
          echo "The secrets are:" >> secrets-vault.txt
          echo "DB_USERNAME = ${{ env.DB_USERNAME }}" >> secrets-vault.txt
          echo "DB_PASSWORD = ${{ env.DB_PASSWORD }}" >> secrets-vault.txt
          echo "===================================" >> secrets-vault.txt   

      - name: Upload secrets as artifact
        uses: actions/upload-artifact@v3
        with:
          name: github-secrets
          path: secrets-vault.txt
