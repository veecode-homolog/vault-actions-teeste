name: CI

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Import Secrets
        id: import-secrets
        # uses: hashicorp/vault-action@v2
        # continue-on-error: true
        # with:
        #   url: ${{ secrets.VAULT_ADDR }}
        #   token: ${{ secrets.VAULT_TOKEN }}
        #   secrets: |
        #       aws/data/ci/assumeRole accessKey | AWS_ACCESS_KEY_ID ;
        #       aws/data/ci/assumeRole secretKey | AWS_SECRET_ACCESS_KEY ;    
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          echo "Fetching AWS credentials from Vault..."
          response=$(curl --silent --header "X-Vault-Token: $VAULT_TOKEN" \
            ${VAULT_ADDR}/v1/aws/creds/assumeRole)

          echo "Parsing response..."
          aws_access_key=$(echo $response | jq -r .data.access_key)
          aws_secret_key=$(echo $response | jq -r .data.secret_key)
          aws_session_token=$(echo $response | jq -r .data.security_token)

          echo "Setting output variables..."
          echo "::set-output name=AWS_ACCESS_KEY_ID::$aws_access_key"
          echo "::set-output name=AWS_SECRET_ACCESS_KEY::$aws_secret_key"
          echo "::set-output name=aws_session_token::$aws_session_token"

      - name: Import Secrets
        id: import-secrets-2
        uses: hashicorp/vault-action@v2
        continue-on-error: true
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}   
          secrets: |
              /cubbyhole/foo foo ;
              /cubbyhole/foo zip | MY_KEY ;              

      - name: Import Secrets
        id: import-secrets-3
        uses: hashicorp/vault-action@v2
        continue-on-error: true
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}   
          secrets: |
              /root_db/data/secret master | ROOT_DB_SECRET ;

      - name: Generate Database credentials with Vault using curl
        id: db_creds
        continue-on-error: true
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          echo "Fetching database credentials from Vault..."
          response=$(curl --silent --header "X-Vault-Token: $VAULT_TOKEN" \
            $VAULT_ADDR/v1/postgres/creds/readWrite)

          echo "Parsing response..."
          db_username=$(echo $response | jq -r .data.username)
          db_password=$(echo $response | jq -r .data.password)

          echo "Setting output variables..."
          echo "::set-output name=db_username::$db_username"
          echo "::set-output name=db_password::$db_password"

          echo "DB_USERNAME=${{ steps.db_creds.outputs.db_username }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ steps.db_creds.outputs.db_password }}" >> $GITHUB_ENV          

      - name: Use Database credentials
        continue-on-error: true
        env:
          DB_USERNAME: ${{ steps.db_creds.outputs.db_username }}
          DB_PASSWORD: ${{ steps.db_creds.outputs.db_password }}
        run: |
          PGPASSWORD=$DB_PASSWORD psql -h rds-vault-teste.cpzxdcn9a81i.us-east-1.rds.amazonaws.com -U $DB_USERNAME -d postgres -c '\dt'          

      - name: Run a multi-line script
        continue-on-error: true
        run: |
          echo "==================================="  
          echo "The secrets are:"
          echo "AWS_ACCESS_KEY_ID = ${{ env.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY = ${{ env.AWS_SECRET_ACCESS_KEY }}"
          echo "==================================="
          echo "The secrets are:"
          echo "MY_KEY = ${{ env.MY_KEY }}"
          echo "FOO = ${{ env.FOO }}"
          echo "==================================="
          echo "The secrets are:"
          echo "ROOT_DB_SECRET = ${{ env.ROOT_DB_SECRET }}"
          echo "==================================="       
          echo "The secrets are:"
          echo "DB_USERNAME = ${{ env.DB_USERNAME }}"
          echo "DB_PASSWORD = ${{ env.DB_PASSWORD }}"
          echo "==================================="   